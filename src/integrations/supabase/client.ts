
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { RpcFunctionReturnTypes } from '@/types/supabase';

const SUPABASE_URL = "https://pqkzybnagdobradtlwpq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBxa3p5Ym5hZ2RvYnJhZHRsd3BxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzNDQ4NDAsImV4cCI6MjA2MTkyMDg0MH0.pr404v2XHGfdeo_ngSCnt4BOD-sUuzbpjktxYaR_4_U";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Extend the supabase client type to include our custom RPC functions
type SupabaseClientWithRpc = ReturnType<typeof createClient<Database>> & {
  rpc<T extends keyof RpcFunctionReturnTypes>(
    fn: T,
    params?: Record<string, any>
  ): { data: RpcFunctionReturnTypes[T] | null; error: any };
};

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      // Explicitly define storage mechanism for better cross-browser compatibility
      storage: localStorage,
    }
  }
) as unknown as SupabaseClientWithRpc;

/**
 * Enhanced utility to check RLS access for debugging
 */
export const checkRlsAccess = async () => {
  try {
    console.log("Testing RLS access...");
    
    // First check if user is authenticated
    const { data: userData, error: userError } = await supabase.auth.getUser();
    if (userError || !userData?.user) {
      console.error("User not authenticated:", userError);
      return { 
        success: false, 
        error: userError || "No authenticated user found",
        message: "User not authenticated" 
      };
    }
    
    console.log("Authenticated user:", userData.user.id);
    
    // Test multiple tables to find which one might be causing issues
    const tableNames = ['categories', 'expenses', 'payment_sources'] as const;
    const results: Record<string, any> = {};
    
    for (const tableName of tableNames) {
      console.log(`Testing RLS access for ${tableName}...`);
      
      try {
        const { data, error, count } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });
          
        if (error) {
          console.error(`RLS check for ${tableName} failed:`, error);
          results[tableName] = { success: false, error };
        } else {
          console.log(`RLS check for ${tableName} passed! Count:`, count);
          results[tableName] = { success: true, count };
        }
      } catch (e) {
        console.error(`Error checking RLS for ${tableName}:`, e);
        results[tableName] = { success: false, error: e };
      }
    }
    
    // Test INSERT capability on expenses to verify write access
    try {
      console.log("Testing INSERT capability for expenses...");
      const testId = `test-${Date.now()}`;
      const { error: insertError } = await supabase
        .from('expenses')
        .insert({
          id: testId,
          title: 'Test Expense',
          amount: 100,
          date: new Date().toISOString(),
          payment_type: 'one-time',
          user_id: userData.user.id
        })
        .select();
      
      if (insertError) {
        console.error("INSERT test failed:", insertError);
        results['insert_test'] = { success: false, error: insertError };
      } else {
        console.log("INSERT test successful!");
        results['insert_test'] = { success: true };
        
        // Clean up test data
        const { error: deleteError } = await supabase
          .from('expenses')
          .delete()
          .eq('id', testId);
          
        if (deleteError) {
          console.error("Failed to clean up test data:", deleteError);
        }
      }
    } catch (e) {
      console.error("Error testing INSERT capability:", e);
      results['insert_test'] = { success: false, error: e };
    }
    
    // Check auth.uid() using our helper function
    try {
      const { data: authData, error: authError } = await supabase
        .rpc('get_auth_uid');
        
      if (authError) {
        console.error("Failed to get auth.uid():", authError);
        results['auth_uid'] = { success: false, error: authError };
      } else {
        console.log("Current auth.uid():", authData);
        console.log("Current user.id:", userData.user.id);
        results['auth_uid'] = { success: true, auth_uid: authData, user_id: userData.user.id };
      }
    } catch (e) {
      console.error("Error checking auth.uid():", e);
      results['auth_uid'] = { success: false, error: e };
    }
    
    // Determine overall success status
    const allTablesSuccess = tableNames.every(table => results[table]?.success);
    const authUidSuccess = results['auth_uid']?.success;
    const insertSuccess = results['insert_test']?.success;
    
    // Return comprehensive result
    const authUidMatch = results['auth_uid']?.success ? 
      results['auth_uid']?.auth_uid === userData.user.id : false;
      
    return {
      success: allTablesSuccess && authUidSuccess, 
      all_tables_accessible: allTablesSuccess,
      auth_uid_working: authUidSuccess,
      insert_working: insertSuccess,
      tables: results,
      auth_uid: results['auth_uid']?.auth_uid,
      user_id: userData.user.id,
      match: authUidMatch,
      message: !allTablesSuccess ? "One or more tables inaccessible" : 
               !authUidSuccess ? "Failed to verify auth.uid()" :
               !insertSuccess ? "Failed to insert test data" :
               !authUidMatch ? "auth.uid() doesn't match user ID" : 
               "All checks passed"
    };
    
  } catch (e) {
    console.error("Error in checkRlsAccess:", e);
    return { success: false, error: e, message: "Error in RLS check function" };
  }
};
