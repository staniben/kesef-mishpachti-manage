
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { RpcFunctionReturnTypes } from '@/types/supabase';

const SUPABASE_URL = "https://pqkzybnagdobradtlwpq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBxa3p5Ym5hZ2RvYnJhZHRsd3BxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzNDQ4NDAsImV4cCI6MjA2MTkyMDg0MH0.pr404v2XHGfdeo_ngSCnt4BOD-sUuzbpjktxYaR_4_U";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Extend the supabase client type to include our custom RPC functions
type SupabaseClientWithRpc = ReturnType<typeof createClient<Database>> & {
  rpc<T extends keyof RpcFunctionReturnTypes>(
    fn: T,
    params?: Record<string, any>
  ): { data: RpcFunctionReturnTypes[T] | null; error: any };
};

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      // Explicitly define storage mechanism for better cross-browser compatibility
      storage: localStorage,
    }
  }
) as unknown as SupabaseClientWithRpc;

/**
 * Utility to check RLS access for debugging
 */
export const checkRlsAccess = async () => {
  try {
    console.log("Testing RLS access...");
    
    // Check if we can access the categories table
    const { data: catData, error: catError } = await supabase
      .from('categories')
      .select('count(*)', { count: 'exact', head: true });
      
    if (catError) {
      console.error("RLS check for categories failed:", catError);
      return { success: false, error: catError };
    }
    
    console.log("RLS check for categories passed!");
    
    // Check auth.uid()
    const { data: authData, error: authError } = await supabase
      .rpc('get_auth_uid');
      
    if (authError) {
      console.error("Failed to get auth.uid():", authError);
      return { success: false, error: authError };
    }
    
    const { data: user } = await supabase.auth.getUser();
    
    console.log("Current auth.uid():", authData);
    console.log("Current user.id:", user?.user?.id);
    
    return {
      success: true, 
      auth_uid: authData,
      user_id: user?.user?.id,
      match: authData === user?.user?.id
    };
    
  } catch (e) {
    console.error("Error checking RLS access:", e);
    return { success: false, error: e };
  }
};
